generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}

model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  role                  Role                   @default(EMPLOYEE)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  isActive              Boolean                @default(true)
  isArchived            Boolean                @default(false)
  consent               Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  profile               Profile?
  schedules             Schedule[]
}

enum Gender {
  MALE
  FEMALE
}

model Department {
  id        String    @id @default(nanoid(8))
  name      String
  head      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Profile   Profile[]
}

model Profile {
  id            String     @id @default(nanoid(8))
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  fname         String
  mname         String?
  lname         String
  suffix        String?
  gender        Gender
  bdate         DateTime
  age           Int
  contactNumber String
  occupation    String
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId  String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     @unique
}

model Project {
  id         String     @id @default(nanoid(8))
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  name       String
  jobOrder   String
  street     String?
  building   String?
  city       String
  barangay   String
  startDate  DateTime
  endDate    DateTime
  notes      String?
  isArchived Boolean    @default(false)
  schedules  Schedule[]
}

model Schedule {
  id        String   @id @default(nanoid(16))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  notes     String?
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// model LoginLogs {
//   id           String   @id @default(nanoid(16))
//   logTime      DateTime @default(now())
//   ipAddress    String?
//   userAgent    String?
//   errorMessage String?
//   status       String?
//   user         User     @relation(fields: [userId], references: [id])
//   userId       String
// }

// model Chart {
//   id        String   @id @default(nanoid(10))
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
//   patientId String  @unique

//   visits        Visit[]
//   prescriptions Presciption[]
// }

// model Evaluation {
//   id        String    @id @default(nanoid(16))
//   diagnosis Diagnosis @relation(fields: [diagnosisId], references: [id])
//   treatment String
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt

//   physician   Employee? @relation(fields: [physicianId], references: [id])
//   physicianId String?
//   // visit       Visit     @relation(fields: [visitId], references: [id], onDelete: Cascade)
//   // visitId     String    @unique
//   diagnosisId Int
// }

// SALUS

// model Employee {
//   id                    String              @id @default(nanoid(8))
//   fname                 String
//   mname                 String?
//   lname                 String
//   gender                Gender
//   bdate                 DateTime
//   age                   Int
//   contactInfo           ContactInfo?
//   createdAt             DateTime            @default(now())
//   updatedAt             DateTime            @updatedAt
//   presciptionsMade      Presciption[]
//   requestedLaboratories LaboratoryRequest[]
//   vitalsChecked         Vitals[]
//   diagnosis             Diagnosis[]
//   professionalInfo      ProfessionInfo?
//   appointments          Appointments[]

//   profile              Profile             @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   profileId            String              @unique
//   clinicalDepartment   ClinicalDepartment? @relation(fields: [clinicalDepartmentId], references: [id])
//   clinicalDepartmentId String?
//   serviceDepartment    ServiceDepartment?  @relation(fields: [serviceDepartmentId], references: [id])
//   serviceDepartmentId  String?
//   employeeRole         EmployeeRole?       @relation(fields: [employeeRoleId], references: [id])
//   employeeRoleId       String?
//   ChartLogs            ChartLogs[]
// }

// model Patient {
//   id                   String                 @id @default(nanoid(8))
//   createdAt            DateTime               @default(now())
//   updatedAt            DateTime               @updatedAt
//   fname                String
//   mname                String?
//   lname                String
//   nameSuffix           String?
//   gender               Gender
//   age                  Int
//   bdate                DateTime
//   bplace               String
//   civilStatus          CivilStatus            @default(SINGLE)
//   occupation           String?
//   contactInfo          ContactInfo?
//   allergies            Allergies[]
//   visits               Visit[]
//   prescriptions        Presciption[]
//   physicalExaminations PhysicalExamination[]
//   diagnosis            Diagnosis[]
//   labResults           LaboratoryResults[]
//   familyMedicalHistory FamilyMedicalHistory[]
//   socialHistory        SocialHistory?
//   vaccinations         Vaccination[]
//   vitals               Vitals[]
//   laboratoryRequest    LaboratoryRequest[]
//   appointments         Appointments[]

//   profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
//   profileId String      @unique
//   ChartLogs ChartLogs[]
// }

// model Vaccination {
//   id             String    @id @default(nanoid(16))
//   vaccineName    String
//   administeredAt DateTime
//   administeredBy String
//   dosage         String
//   nextDueDate    DateTime?
//   patient        Patient?  @relation(fields: [patientId], references: [id])
//   patientId      String?
// }

// model FamilyMedicalHistory {
//   id           String   @id @default(nanoid(16))
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   condition    String // e.g., Diabetes, Heart Disease, Cancer
//   relationship String // e.g., Mother, Father, Sibling, Grandparent
//   ageOfOnset   Int? //Age at which the condition was diagnosed in the family member
//   patient      Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
//   patientId    String?
// }

// model Test {
//   id   String   @id @default(nanoid(16))
//   time DateTime
// }

// model SocialHistory {
//   id               String           @id @default(nanoid(16))
//   alcoholUse       AlcoholUse       @default(NONE)
//   tobaccoUse       TobaccoUse       @default(NEVER)
//   drugUse          DrugUse          @default(NONE)
//   exerciseHabits   ExerciseHabits   @default(VIGOROUS)
//   dietHabits       DietHabits       @default(HEALTHY)
//   occupation       String?
//   livingConditions LivingConditions @default(URBAN)
//   patient          Patient?         @relation(fields: [patientId], references: [id])
//   patientId        String?          @unique
// }

// model LaboratoryRequest {
//   id                    String                  @id @default(uuid())
//   status                LaboratoryRequestStatus @default(PENDING)
//   dateRequested         DateTime                @default(now())
//   lastUpdated           DateTime                @updatedAt
//   LaboratoryResults     LaboratoryResults?
//   laboratoryProcedure   LaboratoryProcedures?   @relation(fields: [labProcedureId], references: [id])
//   labProcedureId        String?
//   requestingPhysician   Employee                @relation(fields: [requestingPhysicianId], references: [id])
//   requestingPhysicianId String

//   Visit     Visit?   @relation(fields: [visitId], references: [id])
//   visitId   String?
//   patient   Patient? @relation(fields: [patientId], references: [id])
//   patientId String?
// }

// model LaboratoryResults {
//   id          String       @id @default(nanoid(16))
//   testName    String
//   testDate    DateTime
//   testResults TestResult[]
//   createdAt   DateTime     @default(now())
//   updatedAt   DateTime     @updatedAt

//   patient             Patient?          @relation(fields: [patientId], references: [id])
//   patientId           String?
//   laboratoryRequest   LaboratoryRequest @relation(fields: [laboratoryRequestId], references: [id])
//   laboratoryRequestId String            @unique
// }

// model TestResult {
//   id                 String            @id @default(nanoid(16))
//   laboratoryResult   LaboratoryResults @relation(fields: [laboratoryResultId], references: [id])
//   laboratoryResultId String
//   parameter          String
//   value              String
//   unit               String
//   referenceRange     String
//   createdAt          DateTime          @default(now())
//   updatedAt          DateTime          @updatedAt
// }

// model Allergies {
//   id            String          @id @default(uuid())
//   name          String
//   description   String?
//   severity      AllergySeverity @default(LOW)
//   dateDiagnosed DateTime
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime        @updatedAt

//   patient   Patient? @relation(fields: [patientId], references: [id])
//   patientId String?
// }

// model DrugCategory {
//   id          String   @id @default(uuid())
//   name        String   @unique
//   description String?
//   drugs       Drugs[]
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// model DrugForm {
//   id          String  @id @default(uuid())
//   name        String  @unique
//   description String?
//   drugs       Drugs[]
// }

// model Drugs {
//   id             String        @id @default(uuid())
//   name           String        @unique
//   drugCategory   DrugCategory? @relation(fields: [drugCategoryId], references: [id])
//   drugCategoryId String?
//   drugForm       DrugForm?     @relation(fields: [drugFormId], references: [id])
//   drugFormId     String?
//   strength       String
//   manufacturer   String
//   priceInCents   Int
//   prescriptions  Presciption[]
//   createdAt      DateTime      @default(now())
//   updatedAt      DateTime      @updatedAt
// }

// model Presciption {
//   id              String    @id @default(uuid())
//   drugs           Drugs?    @relation(fields: [drugsId], references: [id])
//   drugsId         String?
//   dosage          Int
//   frequencyPerDay Int?
//   takenEveryHour  Int?
//   durationInDays  Int
//   notes           String?
//   startDate       DateTime
//   endDate         DateTime
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
//   patient         Patient?  @relation(fields: [patientId], references: [id])
//   patientId       String?
//   Visit           Visit?    @relation(fields: [visitId], references: [id])
//   visitId         String?
//   physician       Employee? @relation(fields: [physicianId], references: [id])
//   physicianId     String?
// }

// model ClinicalDepartment {
//   id          String  @id @default(nanoid(4))
//   name        String  @unique
//   head        String
//   description String?

//   employees Employee[]
//   createdAt DateTime   @default(now())
//   updatedAt DateTime   @updatedAt
// }

// model ServiceDepartment {
//   id String @id @default(nanoid(4))

//   name        String  @unique
//   head        String
//   description String?

//   employees Employee[]
//   visits    Visit[]

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Visit {
//   id                  String                @id @default(nanoid(16))
//   accompaniedBy       String?
//   chiefComplaint      String
//   hpi                 String
//   createdAt           DateTime              @default(now())
//   updatedAt           DateTime              @updatedAt
//   vitals              Vitals?
//   physicalExamination PhysicalExamination[]
//   diagnosis           Diagnosis[]
//   prescriptions       Presciption[]
//   laboratoryRequest   LaboratoryRequest[]
//   serviceDepartment   ServiceDepartment?    @relation(fields: [serviceDepartmentId], references: [id])
//   serviceDepartmentId String?
//   patient             Patient?              @relation(fields: [patientId], references: [id], onDelete: Cascade)
//   patientId           String?
// }

// model PhysicalExamination {
//   id             String        @id @default(nanoid(16))
//   physicalPart   PhysicalPart?
//   specifyIfOther String?
//   isNormal       Boolean
//   remarks        String?
//   createdAt      DateTime      @default(now())
//   updatedAt      DateTime      @updatedAt

//   visit     Visit?   @relation(fields: [visitId], references: [id], onDelete: Cascade)
//   visitId   String?
//   patient   Patient? @relation(fields: [patientId], references: [id])
//   patientId String?
// }

// model LaboratoryProcedures {
//   id            String   @id @default(uuid())
//   procedureName String
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt

//   laboratoryProcedureCategory LaboratoryProcedureCategory? @relation(fields: [labProcedureCategoryId], references: [id])
//   labProcedureCategoryId      String?
//   LaboratoryRequest           LaboratoryRequest[]
// }

// model LaboratoryProcedureCategory {
//   id           String   @id @default(uuid())
//   categoryName String   @unique
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   laboratoryProcedures LaboratoryProcedures[]
// }

// model Diagnosis {
//   id            String   @id @default(nanoid(16))
//   condition     String
//   diagnosisDate DateTime
//   treatment     String
//   createdAt     DateTime @default(now())
//   updatedAt     DateTime @updatedAt
//   patient       Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)
//   patientId     String?
//   Visit         Visit?   @relation(fields: [visitId], references: [id])
//   visitId       String?

//   physician   Employee? @relation(fields: [physicianId], references: [id])
//   physicianId String?
// }

// model Vitals {
//   id                       String   @id @default(nanoid(16))
//   heightInCm               Int
//   weightInKg               Int
//   bloodPressure            String
//   pulseRate                String
//   respiratoryRate          String
//   bodyTemperatureInCelsius Int
//   oxygenSaturation         String
//   createdAt                DateTime @default(now())
//   updatedAt                DateTime @updatedAt

//   checkedBy   Employee @relation(fields: [checkedById], references: [id])
//   checkedById String

//   visit     Visit    @relation(fields: [visitId], references: [id], onDelete: Cascade)
//   visitId   String   @unique
//   patient   Patient? @relation(fields: [patientId], references: [id])
//   patientId String?
// }

// enum MedicalField {
//   CARDIOLOGY
//   DERMATOLOGY
//   ENDOCRINOLOGY
//   GASTROENTEROLOGY
//   HEMATOLOGY
//   INFECTIOUS_DISEASE
//   NEPHROLOGY
//   NEUROLOGY
//   ONCOLOGY
//   OPHTHALMOLOGY
//   ORTHOPEDICS
//   OTOLARYNGOLOGY
//   PEDIATRICS
//   PSYCHIATRY
//   PULMONOLOGY
//   RADIOLOGY
//   RHEUMATOLOGY
//   UROLOGY
//   OTHER
// }

// enum AllergySeverity {
//   LOW
//   MEDIUM
//   HIGH
// }

// enum LaboratoryRequestStatus {
//   PENDING
//   COMPLETED
//   CANCELED
// }

// enum PhysicalPart {
//   HEAD_AND_NECK
//   CHEST
//   ABDOMEN
//   BACK
//   UPPER_EXTREMITIES
//   LOWER_EXTREMITIES
//   GENITALS
//   SKIN
//   EYES
//   EARS
//   NOSE
//   MOUTH_AND_THROAT
//   OTHER
// }

// enum AlcoholUse {
//   NONE
//   SOCIAL
//   MODERATE
//   HEAVY
// }

// enum TobaccoUse {
//   NEVER
//   CURRENT
//   FORMER
// }

// enum DrugUse {
//   NONE
//   RECREATIONAL
//   CHRONIC
// }

// enum ExerciseHabits {
//   SEDENTARY
//   LIGHT
//   MODERATE
//   VIGOROUS
// }

// enum DietHabits {
//   HEALTHY
//   BALANCED
//   UNHEALTHY
// }

// enum LivingConditions {
//   URBAN
//   RURAL
//   HOMELESS
//   INSTITUTIONALIZED
//   OTHER
// }

// enum Gender {
//   MALE
//   FEMALE
//   PREFER_NOT_TO_SAY
//   OTHER
// }

// enum CivilStatus {
//   SINGLE
//   MARRIED
//   DIVORCED
//   WIDOWED
//   SEPARATED
//   OTHER
// }

// model ProfessionInfo {
//   id             String        @id @default(uuid())
//   medicalField   MedicalField? @default(OTHER)
//   specifyField   String?
//   licenseNumber  String?
//   dateRegistered DateTime?
//   createdAt      DateTime      @default(now())
//   updatedAt      DateTime      @updatedAt

//   employee   Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
//   employeeId String?   @unique
// }

// model ChartLogs {
//   id             String    @id @default(nanoid(16))
//   action         String
//   logTime        DateTime  @default(now())
//   logDescription String?
//   ipAddress      String?
//   userAgent      String?
//   status         String?
//   patient        Patient?  @relation(fields: [patientId], references: [id])
//   patientId      String?
//   employee       Employee? @relation(fields: [employeeId], references: [id])
//   employeeId     String?
// }

// model ContactInfo {
//   id      String    @id @default(uuid())
//   phone   String
//   email   String
//   address Address[]

//   employee    Employee? @relation(fields: [employeedId], references: [id])
//   employeedId String?   @unique
//   patient     Patient?  @relation(fields: [patientId], references: [id])
//   patientId   String?   @unique
// }

// model Address {
//   id          String   @id @default(uuid())
//   houseNumber String
//   street      String
//   barangay    String
//   city        String
//   province    String
//   region      String
//   country     String
//   zipCode     String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   contactInfo   ContactInfo? @relation(fields: [contactInfoId], references: [id], onDelete: Cascade)
//   contactInfoId String?
// }

// model Archive {
//   id           String   @id @default(cuid())
//   type         String // employee data or project data
//   data         String // JSON stringify the data then JSON parse
//   dateArchived DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }
