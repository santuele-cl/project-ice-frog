generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  role                  Role                   @default(EMPLOYEE)
  isTwoFactorEnabled    Boolean                @default(false)
  isActive              Boolean                @default(true)
  isArchived            Boolean                @default(false)
  consent               Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  profile               Profile?
  schedules             Schedule[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Department {
  id        String    @id @default(nanoid(8))
  name      String
  head      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Profile   Profile[]
}

model Profile {
  id            String     @id @default(nanoid(8))
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  fname         String
  mname         String?
  lname         String
  suffix        String?
  gender        Gender
  bdate         DateTime
  age           Int
  contactNumber String
  occupation    String
  departmentId  String
  userId        String     @unique
  department    Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id          String     @id @default(nanoid(8))
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  jobOrder    String
  street      String?
  building    String?
  city        String
  barangay    String
  startDate   DateTime
  endDate     DateTime
  notes       String?
  isArchived  Boolean    @default(false)
  isCompleted Boolean    @default(false)
  schedules   Schedule[]
}

model Schedule {
  id        String   @id @default(nanoid(16))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  startDate DateTime
  endDate   DateTime
  userId    String
  notes     String?
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
}
